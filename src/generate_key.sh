#!/bin/bash

# Print the tuple containing each byte of the initial key
echo "Initial key bytes as tuple: (${initial_key_tuple[*]})"

# Run aes.cpp to generate traces using the initial key bytes as input
sudo taskset -c 1 ./aes
echo "Traces generated by aes.cpp with initial key bytes."

# read the last round key from the file
# last_round_key=$(cat results/last_round_key.txt)
# last_round_key_tuple=()
# for ((i=0; i<${#last_round_key}; i+=2)); do
#     byte="0x${last_round_key:i:2}"
#     last_round_key_tuple+=("$byte")
# done
first_round_key=$(cat results/first_round_key.txt)
first_round_key_tuple=()
for ((i=0; i<${#first_round_key}; i+=2)); do
    byte="0x${first_round_key:i:2}"
    first_round_key_tuple+=("$byte")
done

# Array to store generated subkeys, starting with initial_key_tuple as the first element
subkeys=()

./hamming

> results/guessing_entropy.txt
for i in {0..15}; do
    new_subkey=$(python3 cpa.py results/traces.csv results/hamm"$i".csv "${first_round_key_tuple[i]}")
    
    # Append the new subkey (output from cpa.py) to the list of subkeys
    subkeys+=("$new_subkey")
    
    echo "Generated subkey $i: $new_subkey"
done

# print the guessing entropy
python3 guessing_entropy.py

# Print the final list of subkeys
echo "Last round key list: ${first_round_key_tuple[@]}"
echo "Final list of subkeys: ${subkeys[@]}"

# Actual Final Round Key:   0x06 0x14 0x96 0x15 0xdb 0x0b 0x38 0xfe 0xc5 0x28 0x61 0x38 0x22 0x6a 0x25 0xbb
# Predicted Final Round Key:0xb8 0x63 0xfd 0x92 0xf0 0xec 0x95 0xde 0xef 0x8e 0x0a 0x3e 0xc8 0x69 0x1d 0x07